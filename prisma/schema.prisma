generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String             @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  password       String
  accountType    String
  jobs           Job[]              @relation("UserJobs")
  sentMessages   Message[]          @relation("MessageSender")
  conversations  Conversation[]     @relation("ConversationParticipants")
  applications   JobApplication[]   @relation("UserApplications")
  notifications  Notification[]     @relation("UserNotifications")
}

model Job {
  id                  String             @id @default(cuid())
  title               String
  description         String
  datePosted          DateTime           @default(now())
  location            String
  typeOfHelp          String             
  frequency           String             @default("Once") // Default value for frequency
  specificNeeds       String?            
  serviceLocation     String?            
  mobilityRestrictions String?           
  startTiming         String                @default("Immediately")
  additionalInfo      String?            
  specialInstructions String?
  postedBy            User               @relation("UserJobs", fields: [userId], references: [id])
  userId              String
  applications        JobApplication[]   @relation("JobApplications")
}

model JobApplication {
  id         String   @id @default(cuid())
  jobId      String
  userId     String
  job        Job      @relation("JobApplications", fields: [jobId], references: [id])
  applicant  User     @relation("UserApplications", fields: [userId], references: [id])
  status     String   @default("pending")
  appliedAt  DateTime @default(now())
  notifications Notification[] @relation("NotificationJobApplication")
  conversations Conversation[] @relation("ConversationJobApplication")
}

model Notification {
  id             String             @id @default(cuid())
  message        String
  type           String?            // Optional field to specify the type of notification
  read           Boolean            @default(false)
  createdAt      DateTime           @default(now())
  userId         String
  jobApplicationId String?
  jobApplication JobApplication?    @relation("NotificationJobApplication", fields: [jobApplicationId], references: [id])
  user           User               @relation("UserNotifications", fields: [userId], references: [id])
}

model Conversation {
  id           String       @id @default(cuid())
  participants User[]       @relation("ConversationParticipants")
  messages     Message[]
  jobApplicationId String?
  jobApplication JobApplication?    @relation("ConversationJobApplication", fields: [jobApplicationId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Message {
  id              String       @id @default(cuid())
  body            String
  senderId        String
  sender          User         @relation("MessageSender", fields: [senderId], references: [id])
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  sentAt          DateTime     @default(now())
}
